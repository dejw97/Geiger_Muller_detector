#include <Arduino.h>
#include <U8g2lib.h>
#include <Wire.h>

U8G2_SH1106_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

static const unsigned char U8X8_PROGMEM logo[] =
{
  0x5F, 0x75, 0x5B, 0xFF, 0xFF, 0xB6, 0x7E, 0x65, 0x00, 0xD0, 0xFF, 0xDF, 
  0xB6, 0x65, 0x28, 0x00, 0xA9, 0x8A, 0xF6, 0x7F, 0xFB, 0xFF, 0xF9, 0x8A, 
  0x85, 0x00, 0xFF, 0x7F, 0x5C, 0x02, 0x00, 0x04, 0xDF, 0xF9, 0xFF, 0x3F, 
  0xC0, 0x99, 0x62, 0x15, 0x60, 0x51, 0x7F, 0x91, 0x00, 0x00, 0x00, 0x10, 
  0xFF, 0xFF, 0xFF, 0x2F, 0x05, 0x20, 0xC8, 0x62, 0x03, 0x88, 0x5F, 0xEB, 
  0xDF, 0x5D, 0x12, 0x02, 0xFF, 0xFF, 0xFF, 0x77, 0x0C, 0xB0, 0xC1, 0x89, 
  0x08, 0x48, 0x63, 0x6D, 0xB9, 0xED, 0x51, 0x08, 0xFF, 0xFF, 0xFF, 0xDF, 
  0x37, 0x50, 0xA4, 0x35, 0x01, 0x40, 0xF4, 0xAB, 0x56, 0x36, 0x01, 0x00, 
  0xFF, 0xFF, 0xFF, 0x7D, 0x1D, 0xF8, 0xC9, 0x4A, 0x02, 0x80, 0xDE, 0xFA, 
  0xFF, 0xB7, 0x15, 0x42, 0xFF, 0xEF, 0xFF, 0xFF, 0xF3, 0x05, 0xC9, 0x23, 
  0x10, 0xC0, 0x7F, 0xBD, 0xFF, 0xFF, 0x2F, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xC2, 0x14, 0x09, 0xE0, 0xDF, 0xFF, 0xFF, 0xFF, 0x57, 0x80, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xC5, 0x1C, 0xA0, 0xF7, 0xF7, 
  0xFF, 0xFB, 0x7E, 0x06, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x5F, 0x41, 
  0x19, 0xC1, 0xF5, 0x7F, 0xFD, 0xFF, 0xEF, 0x11, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xDB, 0xFB, 0x10, 0x38, 0xF9, 0xFF, 0xFF, 0xAB, 0xB6, 0x07, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0x1A, 0x10, 0xE0, 0xFF, 
  0xF5, 0x56, 0xEF, 0x07, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6D, 
  0x1C, 0x04, 0x70, 0xA6, 0x7F, 0x65, 0xF5, 0x27, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFD, 0x6F, 0x3C, 0x12, 0xE8, 0xE6, 0xE4, 0xFF, 0xEF, 0x9F, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xBF, 0xFC, 0x04, 0x80, 0x3B, 
  0x9B, 0x9A, 0xFC, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0x7F, 
  0xFF, 0x04, 0x40, 0xAE, 0x99, 0xF9, 0xFF, 0x9F, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFB, 0x0F, 0xFF, 0x11, 0xC0, 0xE7, 0x6F, 0xFF, 0xFF, 0x3F, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD5, 0x1F, 0xFE, 0x09, 0x40, 0x59, 
  0xF6, 0xFE, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0x4F, 
  0xFF, 0x07, 0xC0, 0xFF, 0xB7, 0xFB, 0xFF, 0x3F, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xF1, 0xFF, 0xFF, 0x07, 0xC0, 0xBB, 0xDD, 0xFD, 0xFF, 0x7F, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0xFF, 0xFF, 0x07, 0x80, 0xFF, 
  0xF7, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0xFF, 
  0xFF, 0x07, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xF1, 0xFF, 0xFF, 0x07, 0x80, 0xFD, 0xF7, 0xFF, 0xFF, 0x7F, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFF, 0x07, 0x00, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF1, 0xFF, 
  0xFF, 0x0F, 0x00, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xF3, 0xF7, 0xFF, 0x0F, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0xFF, 0xFF, 0x7F, 0x00, 0xFA, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC3, 0xEF, 
  0xFF, 0xFF, 0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xC7, 0xFF, 0xFF, 0xBF, 0x04, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x87, 0xFF, 0xFF, 0x3F, 0x00, 0xFE, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 0xDF, 
  0xFF, 0x3F, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x0F, 0xF0, 0xFF, 0x4F, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xF0, 0xFF, 0x37, 0x01, 0xE8, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xF8, 
  0xFF, 0x87, 0x02, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD5, 
  0xFF, 0xFF, 0x1F, 0xFC, 0xFF, 0xE7, 0x03, 0xE8, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xC1, 0xFF, 0xFF, 0x0F, 0xF8, 0xFF, 0xC3, 0x00, 0xF0, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0x07, 0xF8, 
  0xFF, 0x01, 0x00, 0xA0, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xF0, 
  0xFF, 0xFF, 0x01, 0xF8, 0xE7, 0x07, 0x00, 0x90, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x7F, 0xF8, 0xFF, 0xFF, 0x83, 0xC8, 0x39, 0x00, 0x00, 0xC0, 
  0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0x3F, 0xFE, 0xFF, 0x9F, 0xC4, 0x2B, 
  0x00, 0x08, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xA7, 0xBE, 0x1F, 0x80, 0x03, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF5, 0xF5, 0x01, 0x00, 0x00, 0x00, 0xC0, 
  0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x6C, 0x00, 
  0x00, 0x08, 0x00, 0x80, 0xFE, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xBF, 0xFF, 
  0xEF, 0x2E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFD, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xBF, 0xFF, 0x77, 0x5F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 
  0xF9, 0xFF, 0xFF, 0x7F, 0xFF, 0xDF, 0x7F, 0xFF, 0xF3, 0x03, 0x00, 0x00, 
  0x80, 0x11, 0x00, 0x80, 0xFD, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xEB, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x80, 0xF5, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0x3F, 0xFF, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 
  0xF5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7E, 0xFF, 0x03, 0x00, 0x00, 0x00, 
  0x40, 0x40, 0x00, 0x40, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 
  0x00, 0x00, 0x00, 0x20, 0x81, 0x01, 0x00, 0x80, 0xFD, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 
  0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0x3F, 0xFF, 0x00, 0x00, 0x00, 0x00, 
  0xA6, 0x00, 0x00, 0x92, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0x07, 0xFF, 
  0x01, 0x00, 0x00, 0x40, 0x80, 0x00, 0x14, 0xE8, 0xFD, 0xFF, 0xFF, 0xFF, 
  0xFF, 0x7F, 0x40, 0x7F, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x50, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0B, 0x40, 0xFF, 0x01, 0x00, 0x00, 0x00, 
  0x95, 0x00, 0x54, 0xFF, 0xFD, 0xFF, 0xFF, 0xBF, 0xFF, 0x01, 0x40, 0xFF, 
  0x00, 0x00, 0x00, 0x00, 0xA0, 0x00, 0xAC, 0xA9, 0xFE, 0xFF, 0xFF, 0xFF, 
  0x1F, 0x48, 0xC0, 0xFE, 0x01, 0x00, 0x00, 0x00, 0x02, 0x67, 0xE6, 0xDF, 
  0xFF, 0xFF, 0xFF, 0xDF, 0x00, 0x20, 0xC0, 0x7C, 0x01, 0x00, 0x00, 0x00, 
  0xA0, 0xFF, 0x7F, 0x66, 0xFF, 0xFF, 0xFF, 0xBF, 0x40, 0x41, 0x08, 0x50, 
  0x00, 0x00, 0x00, 0x00, 0x40, 0xFA, 0xFF, 0x95, 0xFF, 0xFF, 0xFF, 0xEF, 
  0x40, 0xA9, 0x08, 0x20, 0x00, 0x00, 0x00, 0x00, 0x04, 0xFF, 0xFF, 0xEF, 
  0xFF, 0xFF, 0x7F, 0xFF, 0xE0, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xD0, 0xFF, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF, 0xB6, 0x30, 0x04, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0xE8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x6B, 0xDF, 
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB9, 0xFE, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, };
static const unsigned char U8X8_PROGMEM bat0[] ={
  0x38, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0xFF, 0x01, };
  
static const unsigned char U8X8_PROGMEM bat1[] ={
  0x38, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0xFF, 0x01, };
  
static const unsigned char U8X8_PROGMEM bat2[] ={
  0x38, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0xFF, 0x01, };

static const unsigned char U8X8_PROGMEM bat3[] ={
  0x38, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0xFF, 0x01, };

static const unsigned char U8X8_PROGMEM bat4[] ={
  0x38, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0xFF, 0x01, };

static const unsigned char U8X8_PROGMEM bat5[] ={
  0x38, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0xFF, 0x01, };

static const unsigned char U8X8_PROGMEM bat6[] ={
  0x38, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0xFF, 0x01, };

static const unsigned char U8X8_PROGMEM bat7[] ={
  0x38, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x01, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0xFF, 0x01, };

static const unsigned char U8X8_PROGMEM bat8[] ={
  0x38, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0xFF, 0x01, };

static const unsigned char U8X8_PROGMEM bat9[] ={
  0x38, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 
  0x7D, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x01, 0x01, 0xFF, 0x01, };

static const unsigned char U8X8_PROGMEM bat10[] ={
  0x38, 0x00, 0xFF, 0x01, 0x01, 0x01, 0x7D, 0x01, 0x7D, 0x01, 0x7D, 0x01, 
  0x7D, 0x01, 0x7D, 0x01, 0x7D, 0x01, 0x7D, 0x01, 0x7D, 0x01, 0x7D, 0x01, 
  0x7D, 0x01, 0x7D, 0x01, 0x7D, 0x01, 0x7D, 0x01, 0x7D, 0x01, 0x7D, 0x01, 
  0x7D, 0x01, 0x7D, 0x01, 0x7D, 0x01, 0x01, 0x01, 0xFF, 0x01, };

static const unsigned char U8X8_PROGMEM scalet[] ={
  0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0x0E, 0xFE, 0x7F, 0xFF, 0xBF, 0xFF, 0xDF, 0xFF, 0xEF, 
  0xFF, 0xF7, 0xFF, 0xFB, 0xFF, 0xFD, 0xFF, 0x0E, 0xAA, 0xAA, 0xAA, 0xAA, 
  0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x0A, 
  };

static const unsigned char U8X8_PROGMEM scale[] ={
  0x00, 0x0F, 0x0C, 0x0F, 0x0C, 0x0F, 0x0C, 0x0F, 0x00, 0x0F, 0x0C, 0x0F, 
  0x0C, 0x0F, 0x0C, 0x0F, 0x00, 0x0F, 0x0C, 0x0F, 0x0C, 0x0F, 0x0C, 0x0F, 
  0x00, 0x0F, 0x0C, 0x0F, 0x0C, 0x0F, 0x0C, 0x0F, 0x00, 0x0F, 0x0C, 0x0F, 
  0x0C, 0x0F, 0x0C, 0x0F, 0x00, };




int B = PA7;  
int OK = PA1; 
int DOWN = PA3; 
int UP =PA5;
int LEFT=PA4;
int RIGHT=PA2;
int A=PB10;

int M=0;
int U=0;
int buzz=PA0;
int pwr=PA6;
int bat=PB1;
int sol=PB0;
int zl=PB12;
int mnh=1;
int sm=0;
int hm=0;
int LED=PC13;
float voltage=0;

void setup() {
  u8g2.begin(/*Select=*/ PA1, /*Right/Next=*/ PA2, /*Left/Prev=*/ PA4, /*Up=*/ PA5, /*Down=*/ PA3, /*Home/Cancel=*/ PA7); // Arduboy 10 (Production)
  
  pinMode(UP, INPUT_PULLUP);
  pinMode(LEFT, INPUT_PULLUP); 
  pinMode(RIGHT, INPUT_PULLUP);
  pinMode(DOWN, INPUT_PULLUP);
  pinMode(OK, INPUT_PULLUP);
  pinMode(B, INPUT_PULLUP);
  pinMode(A, INPUT_PULLUP);
  
  pinMode(buzz, OUTPUT);
  pinMode(zl, INPUT_PULLUP);
  pinMode(pwr, OUTPUT);
  pinMode(LED, OUTPUT);

  digitalWrite(pwr,LOW);
  
  u8g2.clearBuffer();
  u8g2.setDrawColor(0);  
  u8g2.drawXBM( 0, 0, 128, 64 ,logo);
  u8g2.sendBuffer();
  
  for(int i=0;i<3;i++){
    tone(buzz, 1600+i*400*i);
    delay(150-i*20);
    }
  noTone(buzz);
  
  delay(1000);
  u8g2.setDrawColor(1);  
}

void batt(){
  analogReadResolution(12);
  voltage=(analogRead(bat)*1.0/4095*3.3*2);
  if(voltage<3.3){u8g2.drawXBM( 119, 0, 9, 23 ,bat0);}
     
      else if(voltage<3.12){u8g2.drawXBM( 119, 0, 9, 23 ,bat1);}
      else if(voltage<3.24){u8g2.drawXBM( 119, 0, 9, 23 ,bat2);}
      else if(voltage<3.36){u8g2.drawXBM( 119, 0, 9, 23 ,bat3);}
      else if(voltage<3.48){u8g2.drawXBM( 119, 0, 9, 23 ,bat4);}    
      else if(voltage<3.6){ u8g2.drawXBM( 119, 0, 9, 23 ,bat5);}   
      else if(voltage<3.72){u8g2.drawXBM( 119, 0, 9, 23 ,bat6);}     
      else if(voltage<3.84){u8g2.drawXBM( 119, 0, 9, 23 ,bat7);}    
      else if(voltage<3.96){u8g2.drawXBM( 119, 0, 9, 23 ,bat8);}   
      else if(voltage<4.08){u8g2.drawXBM( 119, 0, 9, 23 ,bat9);}   
      else if(voltage<4.3){u8g2.drawXBM( 119, 0, 9, 23 ,bat10);}
  }
  
void drawMenu(){
 
  u8g2.setFont(u8g2_font_6x10_tf);
  u8g2.setFontRefHeightAll();
  M=u8g2.userInterfaceSelectionList("Menu", M, "Licznik G-M\nPanel solarny\nUstawienia");

  if(M==1){Licznik_G_M();}

  if(M==2){solar();} 
    
  if(M==3){drawUstawienia();} 
 }

void drawUstawienia(){
  while(digitalRead(B)==HIGH){
    u8g2.setFont(u8g2_font_6x10_tf);
    u8g2.setFontRefHeightAll();
    U=u8g2.userInterfaceSelectionList("Ustawienia", U, 
    "Pomiar zl.\nTest odczytu\nTest akumulatora");
    
    if(U==0){ drawMenu();}

    if(U==1){PomiarCNT();}

    if(U==2){test();}

    if(U==3){Akumulator();} 


  }
  drawMenu();
}
  
void test(){
    while(digitalRead(B)==HIGH){
        u8g2.clearBuffer();
        analogReadResolution(12);
        if(digitalRead(LEFT)==LOW){u8g2.print(" LEFT");}   
        if(digitalRead(RIGHT)==LOW){u8g2.print(" RIGHT");}
        if(digitalRead(DOWN)==LOW){u8g2.print(" DOWN");}
        if(digitalRead(UP)==LOW){u8g2.print(" UP");}
        if(digitalRead(OK)==LOW){u8g2.print(" OK");}
        if(digitalRead(A)==LOW){u8g2.print(" A");}
        if(digitalRead(B)==LOW){u8g2.print(" B");}

        u8g2.setCursor(0,10);
        u8g2.print(analogRead(bat)*1.0/4095*3.3*2);
        u8g2.setCursor(0,20);
        u8g2.print(analogRead(sol)*1.0/4095*3.3*1000);
        u8g2.sendBuffer();    
      }
      delay(100);
      drawUstawienia();
  }

void PomiarCNT(){
  int CPM=0;
  unsigned long start = micros();
  unsigned long elapsed;
  unsigned long t_tmp;
  unsigned long dt;
  unsigned long impT=0;

  
  float ch_t=1;
  int l=1;
  
  while(digitalRead(OK)==HIGH){
    
      if(digitalRead(UP)==LOW){
        ch_t=ch_t+0.5;
        delay(100);
        }

      if(digitalRead(DOWN)==LOW){
        ch_t=ch_t-0.5;
        if(ch_t<0){ch_t=0;}
        delay(100);
        }
        
      u8g2.clearBuffer();
      u8g2.setCursor(15, 7);
      u8g2.print("Pomiar zliczen");
      u8g2.drawLine(0, 9, 128, 9);
      u8g2.setCursor(10, 18);
      u8g2.print("Czas pomiaru = ");
      u8g2.print(ch_t);
      u8g2.sendBuffer();
    }

    digitalWrite(pwr,HIGH);
    start=micros();
    elapsed=0;
    t_tmp=micros();
    while(digitalRead(B)==HIGH){
      while(digitalRead(zl)==HIGH){
        if(digitalRead(B)==LOW){
            delay(100);
            while(digitalRead(B)==LOW){}
            digitalWrite(pwr,LOW);
            drawUstawienia();
      }}
      impT=micros();
      while(digitalRead(zl)==LOW){}
      impT=micros()-impT;
      //delayMicroseconds(60);
      CPM++;
      elapsed=micros()-t_tmp;
      
      if(elapsed >= 1000000){
        t_tmp=micros();

        
        u8g2.clearBuffer();
        u8g2.setFont(u8g2_font_6x10_tf);
        u8g2.setCursor(15, 7);
        u8g2.print("Pomiar zliczen");
        u8g2.drawLine(0, 9, 128, 9);
        u8g2.setCursor(0, 18);
        u8g2.setFont(u8g2_font_5x7_tf);
        u8g2.print("Czas=");
        u8g2.print((micros()-start)/1000000.0);
        //u8g2.print(" s");
        u8g2.print(" s; impT=");
        u8g2.print(impT);
        u8g2.print(" us");
        u8g2.setCursor(0, 26);
        u8g2.print("zliczenia:");
        u8g2.setFont(u8g2_font_fub20_tf);
        u8g2.setCursor(55, 45);
        u8g2.print(CPM);
        u8g2.sendBuffer();
        dt=micros()-t_tmp;
        }
        
       if((micros()-start) >= (1000000*ch_t*60.0)){
          u8g2.clearBuffer();
        u8g2.setCursor(15, 7);
        u8g2.setFont(u8g2_font_6x10_tf);
        u8g2.print("Pomiar zliczen");
        u8g2.drawLine(0, 9, 128, 9);
        u8g2.setCursor(0, 18);
        u8g2.setFont(u8g2_font_5x7_tf);
        u8g2.print("Czas = ");
        u8g2.print((micros()-start)/1000000.0);
        u8g2.print(" s");
        /*u8g2.print(" s; rt = ");
        u8g2.print(dt/1000.0);
        u8g2.print(" ms");*/
        u8g2.setCursor(0, 26);
        u8g2.print("zliczenia:");
        u8g2.setFont(u8g2_font_fub20_tf);
        u8g2.setCursor(55, 45);
        u8g2.print(CPM);
        u8g2.setFont(u8g2_font_5x7_tf);
        u8g2.setCursor(10, 55);
        u8g2.print("Gotowe");
        u8g2.sendBuffer();
        
        digitalWrite(pwr,LOW);

        for(int i=0;i<3;i++){
              tone(buzz, 1600);
              delay(200);
              noTone(buzz);
              delay(200);
            }
        
      
        while(digitalRead(B)==HIGH){
            if(digitalRead(OK)==LOW){
              ch_t=1;
              l=1;
              while(digitalRead(OK)==LOW){}
              delay(100);
              PomiarCNT();
            }
            }
       }
      }
      
      while(digitalRead(B)==LOW){}
      digitalWrite(pwr,LOW);
      delay(100);
      drawUstawienia();
  }

void Akumulator(){
  float volt;
  while(digitalRead(B)==HIGH){
        u8g2.clearBuffer();
        analogReadResolution(12);
        u8g2.setCursor(15,10);
        u8g2.print("Test akumulatora");
        u8g2.drawLine(0, 11, 128, 11);
        u8g2.setCursor(5,20);
        u8g2.print("U= ");
        volt=analogRead(bat)*1.0/4095*3.3*2;
        u8g2.print(volt);
        u8g2.print(" V");
        u8g2.setCursor(5,30);
        u8g2.print((volt-3.3)*100);
        u8g2.print("%");
        u8g2.sendBuffer();    
      }
      while(digitalRead(B)==LOW){}
      delay(100);
      drawUstawienia();
  }

void bubblesort(double table[], int size)
{
  int i, j, temp;
  for (i = 0; i<size-1; i++)
      {
      for (j=0; j<size-1-i; j++)
        {
        if (table[j] > table[j+1])
          {
            temp = table[j+1];
            table[j+1] = table[j];
            table[j] = temp;
          }
        }
     }
}
  
void Licznik_G_M(){
  int hist_CPM[128];
  int hist[128];
  unsigned long czasTab[128];
  int licznik_czasTab=0;
  unsigned long detime[6];
  unsigned long Edetime=0;
  int histn=128;
  int numReadings=30; 
  int numZlicz=6;
  int CPMpt=0;
  int index_dt=0;
  double *readings=(double*)malloc(8*numReadings);
  long *zliczenia=(long*)malloc(4*numZlicz);
  unsigned long cnt=0;
  unsigned long lastEventTime = micros();
  float uSperH=0;                           
  double meanCPM = 0;
  const float factor = 0.006666/2;
          
  int index = 0;                          
  double total = 0;                          
  unsigned long eventTime= micros();
  unsigned long elapsed=0 ;
  unsigned long disptime=0;
  unsigned long Edisptime=0;
  unsigned long pause=0;
  unsigned long k=0;
  unsigned long start = micros();
  unsigned long elapsed_dt = micros();
  unsigned long Time=0;
  unsigned long dt=10;
  unsigned long tmpTime=0;
  unsigned long tmpC=0;
  double CPM=0.0;
  int mCPM=1000;
  int liczn=0;
  int calk=0;
  int CPM_max=1;
  int CPM_maxh=1;  
  
  for (int i = 0; i < histn; i++) {
    hist[i] = 0;   
    hist_CPM[i] = 0;
    czasTab[i] = 0;                             
    }
  digitalWrite(pwr,HIGH); 
  
  for (int i = 0; i < numReadings; i++) {readings[i] = 0;}
  for (int i = 0; i < numZlicz; i++) {zliczenia[i] = 0;}
  for (int i = 0; i < 6; i++) {detime[i]=0;}
  
  u8g2.clearBuffer();
         u8g2.setCursor(0, 7);
         u8g2.print(F("pre. CPM: "));
         u8g2.print(CPM,1);
         u8g2.setCursor(0, 15);
         u8g2.print(F("suma: "));
         u8g2.print(cnt);
         u8g2.setCursor(0, 23);
         
         if(sm==0){
          u8g2.print(F("trym. CPM: "));
          if(cnt <numReadings){u8g2.print("...");}
          else{u8g2.print(meanCPM);}
          }  
         
         if(sm==1){
          u8g2.print(F("calk. CPM: "));
          u8g2.print(cnt*1.0/(micros()-start-Edisptime)*60000000,1);
          } 

          if(sm==2){
          u8g2.print(F("CPM60s : "));
          if((micros()-start)<60000000){u8g2.print("...");}
          else{
          u8g2.print(1.0*(hist_CPM[index_dt-1]+hist_CPM[index_dt-2]+hist_CPM[index_dt-3]+hist_CPM[index_dt-4]+hist_CPM[index_dt-5]+hist_CPM[index_dt-6])*(60.0/(czasTab[index_dt-1]+czasTab[index_dt-2]+czasTab[index_dt-3]+czasTab[index_dt-4]+czasTab[index_dt-5]+czasTab[index_dt-6]-Edetime)*1000000.0));
            }
          } 


         if(hm==0){
          for (int i = 0; i <histn; i++) {u8g2.drawLine(i,43,i,43-hist[i]*15/CPM_maxh);}
          for (int i = 0; i <histn; i++) {u8g2.drawLine(i,64,i,64-hist_CPM[i]*15/CPM_max);}
          }
          
         if(hm==1){
          for (int i = 0; i <histn; i++) {u8g2.drawLine(i,64,i,64-hist[i]*20/CPM_maxh);}
          }

         if(hm==2){
          for (int i = 0; i <histn; i++) {u8g2.drawLine(i,64,i,64-hist_CPM[i]*20/CPM_max);}
          }

         

          
         u8g2.sendBuffer();  
  
  while(digitalRead(B)==HIGH){
    while(digitalRead(zl)==HIGH){
      if(digitalRead(B)==LOW)
        {delay(100);
        while(digitalRead(B)==LOW){}
        digitalWrite(pwr,LOW);
        free(readings);
        free(zliczenia);
        drawMenu();
        } 
      }
      digitalWrite(buzz,HIGH);
      digitalWrite(LED,LOW);
      
     
      k++;
   
    disptime=micros();

    if(digitalRead(UP)==LOW){mnh=mnh*2;}
    if(digitalRead(DOWN)==LOW){mnh=mnh/2;}
    if(digitalRead(A)==LOW){mnh=1;hm=1;}
    if(digitalRead(RIGHT)==LOW){sm++;
      if(sm>2){sm=0;}
      }
    if(digitalRead(LEFT)==LOW){
      hm++;
      if(hm>2){hm=0;}
      }
      
    cnt++;
    CPMpt++;
    tmpC++;
    eventTime = micros();
    elapsed = eventTime - lastEventTime-pause;
    CPM = 60000000*1.0 / elapsed;
    //uSperH = CPM * factor; 
    lastEventTime = eventTime; 
      
    total -=readings[index];                 
    readings[index] = CPM;                    
    total +=readings[index];                 
    index = (index + 1);

    Time= micros()-tmpTime;

     if(Time>10000000){
      calk-=zliczenia[liczn];
      zliczenia[liczn]=tmpC;
      calk+=zliczenia[liczn];
      liczn++;
      tmpC=0;
      tmpTime=micros();
      if (liczn >= numZlicz)                 
        liczn = 0;
      }                             
      
    if (index >= numReadings){index = 0;}
    digitalWrite(buzz,LOW);
    digitalWrite(LED,HIGH);
    pause=0;  

    while(digitalRead(zl)==LOW){}
    if(k>(CPM/600)){
      
        double tmpT[numReadings];
        for(int i=0;i<numReadings;i++){tmpT[i]=readings[i];}
        bubblesort(tmpT,numReadings);
        meanCPM = (total-tmpT[0]-tmpT[1]-tmpT[2]-tmpT[3]-tmpT[4]-tmpT[5]-tmpT[6]
        -tmpT[7]-tmpT[8]-tmpT[9]-tmpT[29]-tmpT[28]-tmpT[27]-tmpT[26]-tmpT[25]
        -tmpT[24]-tmpT[23]-tmpT[22]-tmpT[21]-tmpT[20])/(numReadings-20);
         
         k=0;
         
        for (int i = 0; i < histn; i++) {
          if(CPM<mCPM*1.0/128*i){
            hist[i]+=1;
            break;
          } 
        }
        for (int i = 0; i < histn; i++) {
          if(hist[i]>CPM_maxh){CPM_maxh=hist[i];}
          }

          
         if((micros()-elapsed_dt)>=(dt*1000000)){
          
           
           
         if(index_dt==127){
            CPM_max=0;
            for (int i = 1; i < histn; i++) {
              hist_CPM[i-1] = hist_CPM[i];
              czasTab[i-1]=czasTab[i];
            if(hist_CPM[i]>CPM_max){
              CPM_max=hist_CPM[i];
              }
              }
          }
          czasTab[index_dt]=(micros()-elapsed_dt);
          elapsed_dt=micros();
          hist_CPM[index_dt]=CPMpt;
          if(CPMpt>CPM_max){CPM_max=CPMpt;}
          
          if(index_dt<127){index_dt++; if(CPMpt>CPM_max){CPM_max=CPMpt;}}
          
          CPMpt=0;
          licznik_czasTab++;
         } 
         
         eventTime=micros();

         u8g2.clearBuffer();
         batt();
         u8g2.setCursor(0, 7);
         u8g2.print(F("pre. CPM: "));
         u8g2.print(CPM,1);
         u8g2.setCursor(0, 15);
         u8g2.print(F("suma: "));
         u8g2.print(cnt);
         u8g2.setCursor(0, 23);
         
         if(sm==0){
          u8g2.print(F("trym. CPM: "));
          if(cnt <numReadings){u8g2.print("...");}
          else{u8g2.print(meanCPM);}
          }  
         
         if(sm==1){
          u8g2.print(F("calk. CPM: "));
          u8g2.print(cnt*1.0/(micros()-start-Edisptime)*60000000,1);
          } 

          if(sm==2){
          u8g2.print(F("CPM60s : "));
          if((micros()-start)<60000000){u8g2.print("...");}
          else{
          u8g2.print(1.0*(hist_CPM[index_dt-1]+hist_CPM[index_dt-2]+hist_CPM[index_dt-3]+hist_CPM[index_dt-4]
          +hist_CPM[index_dt-5]+hist_CPM[index_dt-6])*(60.0/(czasTab[index_dt-1]+czasTab[index_dt-2]
          +czasTab[index_dt-3]+czasTab[index_dt-4]+czasTab[index_dt-5]+czasTab[index_dt-6]-Edetime)*1000000.0));
            }
          } 


         if(hm==0){
          for (int i = 0; i <histn; i++) {u8g2.drawLine(i,43,i,43-hist[i]*15/CPM_maxh);}
          for (int i = 0; i <histn; i++) {u8g2.drawLine(i,64,i,64-hist_CPM[i]*15/CPM_max);}
          }
          
         if(hm==1){
          for (int i = 0; i <histn; i++) {u8g2.drawLine(i,64,i,64-hist[i]*20/CPM_maxh);}
          }

         if(hm==2){
          for (int i = 0; i <histn; i++) {u8g2.drawLine(i,64,i,64-hist_CPM[i]*20/CPM_max);}
          }

         

          
         u8g2.sendBuffer();  




         
      pause=micros()-eventTime;
      }

      
      if(digitalRead(B)==LOW){
        digitalWrite(pwr,LOW);
        digitalWrite(buzz,LOW);
        delay(100);
        free(readings);
        free(zliczenia);
        while(digitalRead(B)==LOW){}
        drawMenu();
        }
        
      disptime=micros()-disptime;
      Edisptime+=disptime;
      if(licznik_czasTab>5){licznik_czasTab=0;}
      detime[licznik_czasTab]+=disptime; 
      
      for (int i=0,Edetime=0; i<6; i++){Edetime+= detime[i]; }   
     }
     
  free(readings);
  free(zliczenia);
  }

  
void solar(){
  
  u8g2.setDrawColor(1);  
  unsigned long start=micros();
  float sensorTab[120];
  analogReadResolution(12);
  float csens,sensor,sens_max=0;
  int m,h,k,p,s,sek=0;
  for (int i = 0; i < 120; i++) {sensorTab[i]=0.0;}

  while(digitalRead(B)==HIGH){
    sensor =analogRead(sol)*1.0/4095*3.3/19450.0*1000000.0;
    u8g2.clearBuffer();   
    batt();
    u8g2.setDrawColor(0);  
    u8g2.drawXBM( 0, 20, 4, 41 ,scale);
    u8g2.drawXBM( 5, 61, 124, 41 ,scalet);
    u8g2.setDrawColor(1);  
    u8g2.setCursor(0,9);
    u8g2.print(F(" P="));
    u8g2.print(sensor*sensor/1000000*20000*1.6);
    u8g2.print(F("mW/m^2"));
    u8g2.setCursor(0,18);
    
    if((micros()-start)>1000000){sek++;start=micros();}
    if(sek>59){sek=0;m++;}
    if(m>59){h++;}
      
    u8g2.print(h);
    u8g2.print(':');
    if(m<10){u8g2.print('0');}
      u8g2.print(m);
      u8g2.print(':');
    if(sek<10){u8g2.print('0');}
      u8g2.print(sek);
      u8g2.print(F(" I="));
      u8g2.print(sensor);
      u8g2.print(F("uA"));
     
    

    analogReadResolution(12);
    csens += analogRead(sol)*1.0/4095*3.3/19780*1000000;
    p++;   

      if(sek>i){
       
        sensor=csens/p;
        i++;
        p=0;
        csens=0;
        sensorTab[s]=sensor;
        sens_max=1;
        for (int i = 0; i < 120; i++) {
          if(sens_max<sensorTab[i]){sens_max=sensorTab[i];}
          }
        
     
          s++;
          if(s>118){s=0;for (int i = 0; i < 120; i++) {sensorTab[i]=0.0;}}
          u8g2.print(sensorTab[i]);
        }
        
        for (int i = 0; i < s; i++) { 
          u8g2.drawPixel(i+5,60-sensorTab[i]*40/sens_max);
        }
           
      u8g2.sendBuffer();
    
    }

  while(digitalRead(B)==LOW){}
  delay(150);
  drawMenu();
  }
  
void loop() {
drawMenu();
}
